# ------------------------
#
# Local Matching Config
#
# ------------------------
# Date:   6/12/2017
#
# TODO:   1. Need to list all of the accepted Config NAMES
#

# ------------------------
# Validation Settings
# ------------------------

ID:       "local-matching-config"
VERSION:  0.2
DEBUG:    true      # true or false to show debug infomration in return to posts
MATCH:    false       # do remote matching, if this is false, only local matching occurs

# ------------------------
# Local Database Settings
# ------------------------
# The local database is known to the code, so it's structure is predefined by the LMS API

LODBC:     "MySQL ODBC 5.3 Driver"
LSERVER:   "172.17.0.2"
LDB:       "Database=LMS"
LDBUN:     "root"
LDBPW:     "mypass"

# ------------------------
# Remote Database Settings
# ------------------------
# Remote databases can be varied in the arrangement, we will try to map our "known" local to
# unknown structure of the remote database.
           
RODBC:     "MySQL ODBC 5.3 Driver"
RSERVER:   "172.17.0.2"
RDB:       "Database=LMS"
RDBUN:     "root"
RDBPW:     "mypass"

# ------------------------------------------------------------------------------------------------
# The following sections use substitution and label matching, to make this work, you must ensure
# that the label you used for substitution is the same as the name. In addtion, it must be at least
# 3 characters long, not share the first 3 characters with any other label.
# With the ability to specify multiple parameters in ["DoB","Postcode"] for a name, this allows
# you to utilise other JSON labels without actually using them. E.G. ["MatchId","DoB"] as described
# in the examples below.
# The labels have the same name as they apprear in the JSON, so if those change, these must be also
# changed otherwise it will not be able to match them up with each other.
#

# ------------------------
# Local Create Settings
# ------------------------
# When we haven't been able to match, a new account is created, however all we do is
# store the PID locally. When a future cycle 0 search comes in, it will use the LMatching
# code above to try and find the record.
LCreate:
    -   Name:   ["PiD","AccountID"] 
        Query:  "INSERT INTO Matches (PiD,TimeS,AccountID) Values ( '#PID#' , NOW() , #ACCOUNTID# )"

# ------------------------
# Local Matching Settings
# ------------------------
# This are the local database search criteria, this is how the local database will be searched
# to find a PiD which we create using the LCreate approach

LMatching:
    -   Name:   "PiD"
        Query:  "SELECT DISTINCT Id,PiD,AccountID,TimeS
                 FROM Matches
                 WHERE PiD = '#PID#'"


# ------------------------
# Remote Matching Settings
# ------------------------
# These examples are using a very simple database structure, this is very similar to Relying Parties
# whom do not have an extensive data source infrastructure. This could actually be in an Excel
# Spreadsheet, it would still work.
#
# Postfix RMatching with something to comment this section to use the other database approach in the 
# examples.
#
# Notice in this example, the first "name" isn't actually used, it isn't even relevant, it's just
# used to differentiate in the internal syntax.
#
RMatching-B:
    -   Name:   ["Combined","DoB","Surname","Postcode"]
        Weight: 100
        Query:  "SELECT DISTINCT a.*
                 FROM OneHundredThousandPeople a
                 WHERE  DATEDIFF(a.DateOfBirth,'#DOB#')=0
                 AND    UCASE(a.SurName) LIKE UCASE('#SURNAME#')
                 AND    a.PostCode LIKE '#POSTCODE#%'"

# These examples still do the same as above, but it is trawling for many results rather than focusing
# on a single record like the above example
RMatching:
    -   Name:   "DoB"
        Weight: 10
        Query:  "SELECT DISTINCT a.ID,a.DateOfBirth
                 FROM OneHundredThousandPeople a
                 WHERE  DATEDIFF(a.DateOfBirth,'#DOB#')=0"

    -   Name:   "Surname"
        Weight: 10
        Query:  "SELECT DISTINCT a.Id,a.SurName,a.Address1
                FROM OneHundredThousandPeople a
                WHERE UCASE(a.SurName) LIKE UCASE('#SURNAME#')"

    -   Name:   "Postcode"
        Weight: 10
        Query:  "SELECT DISTINCT a.ID,a.PostCode
                 FROM OneHundredThousandPeople a
                 WHERE a.PostCode LIKE '#POSTCODE#%'"

